// Code generated by 'freedom new-crud'
package repositorys

import (
	"reflect"

	"github.com/8treenet/freedom"
	"github.com/8treenet/freedom/example/infra-example/application/object"
)

func makeEntity(rep freedom.GORMRepository, obj interface{}) {
	if entityObj, ok := obj.(freedom.Entity); ok {
		rep.InjectEntity(entityObj)
		return
	}
}

func makeEntitys(rep freedom.GORMRepository, objs interface{}) {
	entitysValue := reflect.ValueOf(objs)
	if entitysValue.Kind() == reflect.Ptr {
		entitysValue = entitysValue.Elem()
	}
	if entitysValue.Kind() != reflect.Slice {
		panic("It's not a slice")
	}
	for i := 0; i < entitysValue.Len(); i++ {
		iface := entitysValue.Index(i).Interface()
		if entityObj, ok := iface.(freedom.Entity); ok {
			rep.InjectEntity(entityObj)
		}
	}
}

// findAdminByPrimary .
func findAdminByPrimary(rep freedom.GORMRepository, result interface{}, primary interface{}) (e error) {
	e = rep.DB().Find(result, primary).Error
	if e == nil {
		makeEntity(rep, result)
	}
	return
}

// findAdminsByPrimarys .
func findAdminsByPrimarys(rep freedom.GORMRepository, results interface{}, primarys ...interface{}) (e error) {
	e = rep.DB().Find(results, primarys).Error
	if e == nil {
		makeEntitys(rep, results)
	}
	return
}

// findAdmin .
func findAdmin(rep freedom.GORMRepository, query object.Admin, result interface{}, builders ...freedom.QueryBuilder) (e error) {
	defer func() {
		if e == nil {
			makeEntity(rep, result)
		}
	}()
	db := rep.DB().Where(query)
	if len(builders) == 0 {
		e = db.Last(result).Error
		return
	}

	e = db.Limit(1).Order(builders[0].Order()).Find(result).Error
	return
}

// findAdminByWhere .
func findAdminByWhere(rep freedom.GORMRepository, query string, args []interface{}, result interface{}, builders ...freedom.QueryBuilder) (e error) {
	defer func() {
		if e == nil {
			makeEntity(rep, result)
		}
	}()
	db := rep.DB()
	if query != "" {
		db = db.Where(query, args...)
	}
	if len(builders) == 0 {
		e = db.Last(result).Error
		return
	}

	e = db.Limit(1).Order(builders[0].Order()).Find(result).Error
	return
}

// findAdminByMap .
func findAdminByMap(rep freedom.GORMRepository, query map[string]interface{}, result interface{}, builders ...freedom.QueryBuilder) (e error) {
	defer func() {
		if e == nil {
			makeEntity(rep, result)
		}
	}()

	db := rep.DB().Where(query)
	if len(builders) == 0 {
		e = db.Last(result).Error
		return
	}

	e = db.Limit(1).Order(builders[0].Order()).Find(&result).Error
	return
}

// findAdmins .
func findAdmins(rep freedom.GORMRepository, query object.Admin, results interface{}, builders ...freedom.QueryBuilder) (e error) {
	defer func() {
		if e == nil {
			makeEntitys(rep, results)
		}
	}()
	db := rep.DB().Where(query)

	if len(builders) == 0 {
		e = db.Find(results).Error
		return
	}
	e = builders[0].Execute(db, results)
	return
}

// findAdminsByWhere .
func findAdminsByWhere(rep freedom.GORMRepository, query string, args []interface{}, results interface{}, builders ...freedom.QueryBuilder) (e error) {
	defer func() {
		if e == nil {
			makeEntitys(rep, results)
		}
	}()
	db := rep.DB()
	if query != "" {
		db = db.Where(query, args...)
	}

	if len(builders) == 0 {
		e = db.Find(results).Error
		return
	}
	e = builders[0].Execute(db, results)
	return
}

// findAdminsByMap .
func findAdminsByMap(rep freedom.GORMRepository, query map[string]interface{}, results interface{}, builders ...freedom.QueryBuilder) (e error) {
	defer func() {
		if e == nil {
			makeEntitys(rep, results)
		}
	}()

	db := rep.DB().Where(query)

	if len(builders) == 0 {
		e = db.Find(results).Error
		return
	}
	e = builders[0].Execute(db, results)
	return
}

// createAdmin .
func createAdmin(rep freedom.GORMRepository, object *object.Admin) (rowsAffected int64, e error) {
	db := rep.DB().Create(object)
	rowsAffected = db.RowsAffected
	e = db.Error
	return
}

// saveAdmin .
func saveAdmin(rep freedom.GORMRepository, object *object.Admin) (affected int64, e error) {
	db := rep.DB().Model(object).Updates(object.TakeChanges())
	e = db.Error
	affected = db.RowsAffected
	return
}

// findCartByPrimary .
func findCartByPrimary(rep freedom.GORMRepository, result interface{}, primary interface{}) (e error) {
	e = rep.DB().Find(result, primary).Error
	if e == nil {
		makeEntity(rep, result)
	}
	return
}

// findCartsByPrimarys .
func findCartsByPrimarys(rep freedom.GORMRepository, results interface{}, primarys ...interface{}) (e error) {
	e = rep.DB().Find(results, primarys).Error
	if e == nil {
		makeEntitys(rep, results)
	}
	return
}

// findCart .
func findCart(rep freedom.GORMRepository, query object.Cart, result interface{}, builders ...freedom.QueryBuilder) (e error) {
	defer func() {
		if e == nil {
			makeEntity(rep, result)
		}
	}()
	db := rep.DB().Where(query)
	if len(builders) == 0 {
		e = db.Last(result).Error
		return
	}

	e = db.Limit(1).Order(builders[0].Order()).Find(result).Error
	return
}

// findCartByWhere .
func findCartByWhere(rep freedom.GORMRepository, query string, args []interface{}, result interface{}, builders ...freedom.QueryBuilder) (e error) {
	defer func() {
		if e == nil {
			makeEntity(rep, result)
		}
	}()
	db := rep.DB()
	if query != "" {
		db = db.Where(query, args...)
	}
	if len(builders) == 0 {
		e = db.Last(result).Error
		return
	}

	e = db.Limit(1).Order(builders[0].Order()).Find(result).Error
	return
}

// findCartByMap .
func findCartByMap(rep freedom.GORMRepository, query map[string]interface{}, result interface{}, builders ...freedom.QueryBuilder) (e error) {
	defer func() {
		if e == nil {
			makeEntity(rep, result)
		}
	}()

	db := rep.DB().Where(query)
	if len(builders) == 0 {
		e = db.Last(result).Error
		return
	}

	e = db.Limit(1).Order(builders[0].Order()).Find(&result).Error
	return
}

// findCarts .
func findCarts(rep freedom.GORMRepository, query object.Cart, results interface{}, builders ...freedom.QueryBuilder) (e error) {
	defer func() {
		if e == nil {
			makeEntitys(rep, results)
		}
	}()
	db := rep.DB().Where(query)

	if len(builders) == 0 {
		e = db.Find(results).Error
		return
	}
	e = builders[0].Execute(db, results)
	return
}

// findCartsByWhere .
func findCartsByWhere(rep freedom.GORMRepository, query string, args []interface{}, results interface{}, builders ...freedom.QueryBuilder) (e error) {
	defer func() {
		if e == nil {
			makeEntitys(rep, results)
		}
	}()
	db := rep.DB()
	if query != "" {
		db = db.Where(query, args...)
	}

	if len(builders) == 0 {
		e = db.Find(results).Error
		return
	}
	e = builders[0].Execute(db, results)
	return
}

// findCartsByMap .
func findCartsByMap(rep freedom.GORMRepository, query map[string]interface{}, results interface{}, builders ...freedom.QueryBuilder) (e error) {
	defer func() {
		if e == nil {
			makeEntitys(rep, results)
		}
	}()

	db := rep.DB().Where(query)

	if len(builders) == 0 {
		e = db.Find(results).Error
		return
	}
	e = builders[0].Execute(db, results)
	return
}

// createCart .
func createCart(rep freedom.GORMRepository, object *object.Cart) (rowsAffected int64, e error) {
	db := rep.DB().Create(object)
	rowsAffected = db.RowsAffected
	e = db.Error
	return
}

// saveCart .
func saveCart(rep freedom.GORMRepository, object *object.Cart) (affected int64, e error) {
	db := rep.DB().Model(object).Updates(object.TakeChanges())
	e = db.Error
	affected = db.RowsAffected
	return
}

// findDeliveryByPrimary .
func findDeliveryByPrimary(rep freedom.GORMRepository, result interface{}, primary interface{}) (e error) {
	e = rep.DB().Find(result, primary).Error
	if e == nil {
		makeEntity(rep, result)
	}
	return
}

// findDeliverysByPrimarys .
func findDeliverysByPrimarys(rep freedom.GORMRepository, results interface{}, primarys ...interface{}) (e error) {
	e = rep.DB().Find(results, primarys).Error
	if e == nil {
		makeEntitys(rep, results)
	}
	return
}

// findDelivery .
func findDelivery(rep freedom.GORMRepository, query object.Delivery, result interface{}, builders ...freedom.QueryBuilder) (e error) {
	defer func() {
		if e == nil {
			makeEntity(rep, result)
		}
	}()
	db := rep.DB().Where(query)
	if len(builders) == 0 {
		e = db.Last(result).Error
		return
	}

	e = db.Limit(1).Order(builders[0].Order()).Find(result).Error
	return
}

// findDeliveryByWhere .
func findDeliveryByWhere(rep freedom.GORMRepository, query string, args []interface{}, result interface{}, builders ...freedom.QueryBuilder) (e error) {
	defer func() {
		if e == nil {
			makeEntity(rep, result)
		}
	}()
	db := rep.DB()
	if query != "" {
		db = db.Where(query, args...)
	}
	if len(builders) == 0 {
		e = db.Last(result).Error
		return
	}

	e = db.Limit(1).Order(builders[0].Order()).Find(result).Error
	return
}

// findDeliveryByMap .
func findDeliveryByMap(rep freedom.GORMRepository, query map[string]interface{}, result interface{}, builders ...freedom.QueryBuilder) (e error) {
	defer func() {
		if e == nil {
			makeEntity(rep, result)
		}
	}()

	db := rep.DB().Where(query)
	if len(builders) == 0 {
		e = db.Last(result).Error
		return
	}

	e = db.Limit(1).Order(builders[0].Order()).Find(&result).Error
	return
}

// findDeliverys .
func findDeliverys(rep freedom.GORMRepository, query object.Delivery, results interface{}, builders ...freedom.QueryBuilder) (e error) {
	defer func() {
		if e == nil {
			makeEntitys(rep, results)
		}
	}()
	db := rep.DB().Where(query)

	if len(builders) == 0 {
		e = db.Find(results).Error
		return
	}
	e = builders[0].Execute(db, results)
	return
}

// findDeliverysByWhere .
func findDeliverysByWhere(rep freedom.GORMRepository, query string, args []interface{}, results interface{}, builders ...freedom.QueryBuilder) (e error) {
	defer func() {
		if e == nil {
			makeEntitys(rep, results)
		}
	}()
	db := rep.DB()
	if query != "" {
		db = db.Where(query, args...)
	}

	if len(builders) == 0 {
		e = db.Find(results).Error
		return
	}
	e = builders[0].Execute(db, results)
	return
}

// findDeliverysByMap .
func findDeliverysByMap(rep freedom.GORMRepository, query map[string]interface{}, results interface{}, builders ...freedom.QueryBuilder) (e error) {
	defer func() {
		if e == nil {
			makeEntitys(rep, results)
		}
	}()

	db := rep.DB().Where(query)

	if len(builders) == 0 {
		e = db.Find(results).Error
		return
	}
	e = builders[0].Execute(db, results)
	return
}

// createDelivery .
func createDelivery(rep freedom.GORMRepository, object *object.Delivery) (rowsAffected int64, e error) {
	db := rep.DB().Create(object)
	rowsAffected = db.RowsAffected
	e = db.Error
	return
}

// saveDelivery .
func saveDelivery(rep freedom.GORMRepository, object *object.Delivery) (affected int64, e error) {
	db := rep.DB().Model(object).Updates(object.TakeChanges())
	e = db.Error
	affected = db.RowsAffected
	return
}

// findGoodsByPrimary .
func findGoodsByPrimary(rep freedom.GORMRepository, result interface{}, primary interface{}) (e error) {
	e = rep.DB().Find(result, primary).Error
	if e == nil {
		makeEntity(rep, result)
	}
	return
}

// findGoodssByPrimarys .
func findGoodssByPrimarys(rep freedom.GORMRepository, results interface{}, primarys ...interface{}) (e error) {
	e = rep.DB().Find(results, primarys).Error
	if e == nil {
		makeEntitys(rep, results)
	}
	return
}

// findGoods .
func findGoods(rep freedom.GORMRepository, query object.Goods, result interface{}, builders ...freedom.QueryBuilder) (e error) {
	defer func() {
		if e == nil {
			makeEntity(rep, result)
		}
	}()
	db := rep.DB().Where(query)
	if len(builders) == 0 {
		e = db.Last(result).Error
		return
	}

	e = db.Limit(1).Order(builders[0].Order()).Find(result).Error
	return
}

// findGoodsByWhere .
func findGoodsByWhere(rep freedom.GORMRepository, query string, args []interface{}, result interface{}, builders ...freedom.QueryBuilder) (e error) {
	defer func() {
		if e == nil {
			makeEntity(rep, result)
		}
	}()
	db := rep.DB()
	if query != "" {
		db = db.Where(query, args...)
	}
	if len(builders) == 0 {
		e = db.Last(result).Error
		return
	}

	e = db.Limit(1).Order(builders[0].Order()).Find(result).Error
	return
}

// findGoodsByMap .
func findGoodsByMap(rep freedom.GORMRepository, query map[string]interface{}, result interface{}, builders ...freedom.QueryBuilder) (e error) {
	defer func() {
		if e == nil {
			makeEntity(rep, result)
		}
	}()

	db := rep.DB().Where(query)
	if len(builders) == 0 {
		e = db.Last(result).Error
		return
	}

	e = db.Limit(1).Order(builders[0].Order()).Find(&result).Error
	return
}

// findGoodss .
func findGoodss(rep freedom.GORMRepository, query object.Goods, results interface{}, builders ...freedom.QueryBuilder) (e error) {
	defer func() {
		if e == nil {
			makeEntitys(rep, results)
		}
	}()
	db := rep.DB().Where(query)

	if len(builders) == 0 {
		e = db.Find(results).Error
		return
	}
	e = builders[0].Execute(db, results)
	return
}

// findGoodssByWhere .
func findGoodssByWhere(rep freedom.GORMRepository, query string, args []interface{}, results interface{}, builders ...freedom.QueryBuilder) (e error) {
	defer func() {
		if e == nil {
			makeEntitys(rep, results)
		}
	}()
	db := rep.DB()
	if query != "" {
		db = db.Where(query, args...)
	}

	if len(builders) == 0 {
		e = db.Find(results).Error
		return
	}
	e = builders[0].Execute(db, results)
	return
}

// findGoodssByMap .
func findGoodssByMap(rep freedom.GORMRepository, query map[string]interface{}, results interface{}, builders ...freedom.QueryBuilder) (e error) {
	defer func() {
		if e == nil {
			makeEntitys(rep, results)
		}
	}()

	db := rep.DB().Where(query)

	if len(builders) == 0 {
		e = db.Find(results).Error
		return
	}
	e = builders[0].Execute(db, results)
	return
}

// createGoods .
func createGoods(rep freedom.GORMRepository, object *object.Goods) (rowsAffected int64, e error) {
	db := rep.DB().Create(object)
	rowsAffected = db.RowsAffected
	e = db.Error
	return
}

// saveGoods .
func saveGoods(rep freedom.GORMRepository, object *object.Goods) (affected int64, e error) {
	db := rep.DB().Model(object).Updates(object.TakeChanges())
	e = db.Error
	affected = db.RowsAffected
	return
}

// findOrderByPrimary .
func findOrderByPrimary(rep freedom.GORMRepository, result interface{}, primary interface{}) (e error) {
	e = rep.DB().Find(result, primary).Error
	if e == nil {
		makeEntity(rep, result)
	}
	return
}

// findOrdersByPrimarys .
func findOrdersByPrimarys(rep freedom.GORMRepository, results interface{}, primarys ...interface{}) (e error) {
	e = rep.DB().Find(results, primarys).Error
	if e == nil {
		makeEntitys(rep, results)
	}
	return
}

// findOrder .
func findOrder(rep freedom.GORMRepository, query object.Order, result interface{}, builders ...freedom.QueryBuilder) (e error) {
	defer func() {
		if e == nil {
			makeEntity(rep, result)
		}
	}()
	db := rep.DB().Where(query)
	if len(builders) == 0 {
		e = db.Last(result).Error
		return
	}

	e = db.Limit(1).Order(builders[0].Order()).Find(result).Error
	return
}

// findOrderByWhere .
func findOrderByWhere(rep freedom.GORMRepository, query string, args []interface{}, result interface{}, builders ...freedom.QueryBuilder) (e error) {
	defer func() {
		if e == nil {
			makeEntity(rep, result)
		}
	}()
	db := rep.DB()
	if query != "" {
		db = db.Where(query, args...)
	}
	if len(builders) == 0 {
		e = db.Last(result).Error
		return
	}

	e = db.Limit(1).Order(builders[0].Order()).Find(result).Error
	return
}

// findOrderByMap .
func findOrderByMap(rep freedom.GORMRepository, query map[string]interface{}, result interface{}, builders ...freedom.QueryBuilder) (e error) {
	defer func() {
		if e == nil {
			makeEntity(rep, result)
		}
	}()

	db := rep.DB().Where(query)
	if len(builders) == 0 {
		e = db.Last(result).Error
		return
	}

	e = db.Limit(1).Order(builders[0].Order()).Find(&result).Error
	return
}

// findOrders .
func findOrders(rep freedom.GORMRepository, query object.Order, results interface{}, builders ...freedom.QueryBuilder) (e error) {
	defer func() {
		if e == nil {
			makeEntitys(rep, results)
		}
	}()
	db := rep.DB().Where(query)

	if len(builders) == 0 {
		e = db.Find(results).Error
		return
	}
	e = builders[0].Execute(db, results)
	return
}

// findOrdersByWhere .
func findOrdersByWhere(rep freedom.GORMRepository, query string, args []interface{}, results interface{}, builders ...freedom.QueryBuilder) (e error) {
	defer func() {
		if e == nil {
			makeEntitys(rep, results)
		}
	}()
	db := rep.DB()
	if query != "" {
		db = db.Where(query, args...)
	}

	if len(builders) == 0 {
		e = db.Find(results).Error
		return
	}
	e = builders[0].Execute(db, results)
	return
}

// findOrdersByMap .
func findOrdersByMap(rep freedom.GORMRepository, query map[string]interface{}, results interface{}, builders ...freedom.QueryBuilder) (e error) {
	defer func() {
		if e == nil {
			makeEntitys(rep, results)
		}
	}()

	db := rep.DB().Where(query)

	if len(builders) == 0 {
		e = db.Find(results).Error
		return
	}
	e = builders[0].Execute(db, results)
	return
}

// createOrder .
func createOrder(rep freedom.GORMRepository, object *object.Order) (rowsAffected int64, e error) {
	db := rep.DB().Create(object)
	rowsAffected = db.RowsAffected
	e = db.Error
	return
}

// saveOrder .
func saveOrder(rep freedom.GORMRepository, object *object.Order) (affected int64, e error) {
	db := rep.DB().Model(object).Updates(object.TakeChanges())
	e = db.Error
	affected = db.RowsAffected
	return
}

// findTestEmailsByPrimary .
func findTestEmailsByPrimary(rep freedom.GORMRepository, result interface{}, primary interface{}) (e error) {
	e = rep.DB().Find(result, primary).Error
	if e == nil {
		makeEntity(rep, result)
	}
	return
}

// findTestEmailssByPrimarys .
func findTestEmailssByPrimarys(rep freedom.GORMRepository, results interface{}, primarys ...interface{}) (e error) {
	e = rep.DB().Find(results, primarys).Error
	if e == nil {
		makeEntitys(rep, results)
	}
	return
}

// findTestEmails .
func findTestEmails(rep freedom.GORMRepository, query object.TestEmails, result interface{}, builders ...freedom.QueryBuilder) (e error) {
	defer func() {
		if e == nil {
			makeEntity(rep, result)
		}
	}()
	db := rep.DB().Where(query)
	if len(builders) == 0 {
		e = db.Last(result).Error
		return
	}

	e = db.Limit(1).Order(builders[0].Order()).Find(result).Error
	return
}

// findTestEmailsByWhere .
func findTestEmailsByWhere(rep freedom.GORMRepository, query string, args []interface{}, result interface{}, builders ...freedom.QueryBuilder) (e error) {
	defer func() {
		if e == nil {
			makeEntity(rep, result)
		}
	}()
	db := rep.DB()
	if query != "" {
		db = db.Where(query, args...)
	}
	if len(builders) == 0 {
		e = db.Last(result).Error
		return
	}

	e = db.Limit(1).Order(builders[0].Order()).Find(result).Error
	return
}

// findTestEmailsByMap .
func findTestEmailsByMap(rep freedom.GORMRepository, query map[string]interface{}, result interface{}, builders ...freedom.QueryBuilder) (e error) {
	defer func() {
		if e == nil {
			makeEntity(rep, result)
		}
	}()

	db := rep.DB().Where(query)
	if len(builders) == 0 {
		e = db.Last(result).Error
		return
	}

	e = db.Limit(1).Order(builders[0].Order()).Find(&result).Error
	return
}

// findTestEmailss .
func findTestEmailss(rep freedom.GORMRepository, query object.TestEmails, results interface{}, builders ...freedom.QueryBuilder) (e error) {
	defer func() {
		if e == nil {
			makeEntitys(rep, results)
		}
	}()
	db := rep.DB().Where(query)

	if len(builders) == 0 {
		e = db.Find(results).Error
		return
	}
	e = builders[0].Execute(db, results)
	return
}

// findTestEmailssByWhere .
func findTestEmailssByWhere(rep freedom.GORMRepository, query string, args []interface{}, results interface{}, builders ...freedom.QueryBuilder) (e error) {
	defer func() {
		if e == nil {
			makeEntitys(rep, results)
		}
	}()
	db := rep.DB()
	if query != "" {
		db = db.Where(query, args...)
	}

	if len(builders) == 0 {
		e = db.Find(results).Error
		return
	}
	e = builders[0].Execute(db, results)
	return
}

// findTestEmailssByMap .
func findTestEmailssByMap(rep freedom.GORMRepository, query map[string]interface{}, results interface{}, builders ...freedom.QueryBuilder) (e error) {
	defer func() {
		if e == nil {
			makeEntitys(rep, results)
		}
	}()

	db := rep.DB().Where(query)

	if len(builders) == 0 {
		e = db.Find(results).Error
		return
	}
	e = builders[0].Execute(db, results)
	return
}

// createTestEmails .
func createTestEmails(rep freedom.GORMRepository, object *object.TestEmails) (rowsAffected int64, e error) {
	db := rep.DB().Create(object)
	rowsAffected = db.RowsAffected
	e = db.Error
	return
}

// saveTestEmails .
func saveTestEmails(rep freedom.GORMRepository, object *object.TestEmails) (affected int64, e error) {
	db := rep.DB().Model(object).Updates(object.TakeChanges())
	e = db.Error
	affected = db.RowsAffected
	return
}

// findTestUsersByPrimary .
func findTestUsersByPrimary(rep freedom.GORMRepository, result interface{}, primary interface{}) (e error) {
	e = rep.DB().Find(result, primary).Error
	if e == nil {
		makeEntity(rep, result)
	}
	return
}

// findTestUserssByPrimarys .
func findTestUserssByPrimarys(rep freedom.GORMRepository, results interface{}, primarys ...interface{}) (e error) {
	e = rep.DB().Find(results, primarys).Error
	if e == nil {
		makeEntitys(rep, results)
	}
	return
}

// findTestUsers .
func findTestUsers(rep freedom.GORMRepository, query object.TestUsers, result interface{}, builders ...freedom.QueryBuilder) (e error) {
	defer func() {
		if e == nil {
			makeEntity(rep, result)
		}
	}()
	db := rep.DB().Where(query)
	if len(builders) == 0 {
		e = db.Last(result).Error
		return
	}

	e = db.Limit(1).Order(builders[0].Order()).Find(result).Error
	return
}

// findTestUsersByWhere .
func findTestUsersByWhere(rep freedom.GORMRepository, query string, args []interface{}, result interface{}, builders ...freedom.QueryBuilder) (e error) {
	defer func() {
		if e == nil {
			makeEntity(rep, result)
		}
	}()
	db := rep.DB()
	if query != "" {
		db = db.Where(query, args...)
	}
	if len(builders) == 0 {
		e = db.Last(result).Error
		return
	}

	e = db.Limit(1).Order(builders[0].Order()).Find(result).Error
	return
}

// findTestUsersByMap .
func findTestUsersByMap(rep freedom.GORMRepository, query map[string]interface{}, result interface{}, builders ...freedom.QueryBuilder) (e error) {
	defer func() {
		if e == nil {
			makeEntity(rep, result)
		}
	}()

	db := rep.DB().Where(query)
	if len(builders) == 0 {
		e = db.Last(result).Error
		return
	}

	e = db.Limit(1).Order(builders[0].Order()).Find(&result).Error
	return
}

// findTestUserss .
func findTestUserss(rep freedom.GORMRepository, query object.TestUsers, results interface{}, builders ...freedom.QueryBuilder) (e error) {
	defer func() {
		if e == nil {
			makeEntitys(rep, results)
		}
	}()
	db := rep.DB().Where(query)

	if len(builders) == 0 {
		e = db.Find(results).Error
		return
	}
	e = builders[0].Execute(db, results)
	return
}

// findTestUserssByWhere .
func findTestUserssByWhere(rep freedom.GORMRepository, query string, args []interface{}, results interface{}, builders ...freedom.QueryBuilder) (e error) {
	defer func() {
		if e == nil {
			makeEntitys(rep, results)
		}
	}()
	db := rep.DB()
	if query != "" {
		db = db.Where(query, args...)
	}

	if len(builders) == 0 {
		e = db.Find(results).Error
		return
	}
	e = builders[0].Execute(db, results)
	return
}

// findTestUserssByMap .
func findTestUserssByMap(rep freedom.GORMRepository, query map[string]interface{}, results interface{}, builders ...freedom.QueryBuilder) (e error) {
	defer func() {
		if e == nil {
			makeEntitys(rep, results)
		}
	}()

	db := rep.DB().Where(query)

	if len(builders) == 0 {
		e = db.Find(results).Error
		return
	}
	e = builders[0].Execute(db, results)
	return
}

// createTestUsers .
func createTestUsers(rep freedom.GORMRepository, object *object.TestUsers) (rowsAffected int64, e error) {
	db := rep.DB().Create(object)
	rowsAffected = db.RowsAffected
	e = db.Error
	return
}

// saveTestUsers .
func saveTestUsers(rep freedom.GORMRepository, object *object.TestUsers) (affected int64, e error) {
	db := rep.DB().Model(object).Updates(object.TakeChanges())
	e = db.Error
	affected = db.RowsAffected
	return
}
